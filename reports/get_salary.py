from bd.model import Clients, Document
from arrow import utcnow, get
from bd.model import Session, Clients, Documents
from .util import xls_to_json_format_change, json_to_xls_format_change_
from pprint import pprint
from openpyxl import load_workbook, Workbook
from openpyxl.utils import get_column_letter, get_column_letter
import sys  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å sys –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
from decimal import Decimal


name = "ü§ëü§ëü§ë –ó–∞—Ä–ø–ª–∞—Ç–∞ ‚û°Ô∏è".upper()
desc = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω–µ –∏–∑ xls –≤ –±–∞–∑—É"
mime = "file_5"


class FileCRMInput:
    name = "–§–∞–π–ª CRM"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª CRM  –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx"
    type = "FILE"


class FileCdekInput:
    name = "–§–∞–π–ª cdek"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª cdek –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx"
    type = "FILE"


class FileProvidedFileInput:
    name = "–§–∞–π–ª provided file"
    desc = "–û—Ç–ø—Ä–∞–≤—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–∏ÃÜ —Ñ–∞–∏ÃÜ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx"
    type = "FILE"


def get_inputs(session: Session):
    return {
        "CRM": FileCRMInput,
        "Cdek": FileCdekInput,
        "ProvidedFile": FileProvidedFileInput,
    }


def generate(session: Session):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Å—Å–∏–∏
        params = session.params["inputs"]["0"]
        # pprint(params)
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö CRM
        crm_dict = {}

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å CRM, –≥–¥–µ –∫–ª—é—á - –æ–ø–µ—Ä–∞—Ç–æ—Ä, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ ID –∑–∞–∫–∞–∑–æ–≤
        for item in params["CRM"]:
            operator = item.get("–û–ø–µ—Ä–∞—Ç–æ—Ä")
            if operator not in crm_dict:
                crm_dict[operator] = []
            crm_dict[operator].append(item.get("ID"))

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ Cdek
        keys = list(params["Cdek"][0].keys())

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π –∫–ª—é—á–∏ –∏–∑ Cdek
        key1 = keys[0]
        key2 = keys[1]

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å  –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ Cdek
        cdek_date = {
            item[key1]: item[key2]
            for item in params["Cdek"]
            if None not in (item.get(key1), item.get(key2))
        }

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å—É–º–º –ø—Ä–æ–¥–∞–∂, —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
        dict_sales = {}
        dict_order = {}
        dict_order_list_ = {}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è CRM
        for user, order_list in crm_dict.items():
            sum_ = 0
            order_ = {}
            order_list_ = []

            # –û–±—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            for order in order_list:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ Cdek
                if order in cdek_date:
                    order_list_.append(order)
                    order_.update({str(order): cdek_date.get(order, 0)})

                sum_ += cdek_date.get(order, 0)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã–º–∏
            dict_sales.update({user: sum_})
            dict_order.update({user: order_})
            dict_order_list_.update({user: order_list_})

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–∞—Ö –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Å—Å–∏–∏ ProvidedFile
        provided_file_ = params["ProvidedFile"]

        provided_file = []

        oldest_salesman_data = {}

        preoldest_salesman_list = ["POD", "SKP", "UDL", "M31"]

        # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è None –Ω–∞ 0 –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–∞—Ä–µ
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞ provided_file_
        for item in provided_file_:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ preoldest_salesman_list
            if item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"] in preoldest_salesman_list:
                # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å—Ç–∞—Ä–µ–π—à–∏—Ö, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å new_item,
                # –≥–¥–µ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è None –Ω–∞ 0
                new_item = {
                    key: (value if value is not None else 0)
                    for key, value in item.items()
                }

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å oldest_salesman_data, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
                # –∏ –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å new_item –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
                oldest_salesman_data.update({item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"]: new_item})
            else:
                # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä–µ–π—à–∏–º, —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å new_item,
                # –≥–¥–µ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è None –Ω–∞ 0
                new_item = {
                    key: (value if value is not None else 0)
                    for key, value in item.items()
                }
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å new_item –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ provided_file_
                provided_file.append(new_item)
        # pprint(oldest_salesman_data)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—â–µ–π —Å—É–º–º—ã –∏ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        total_date = []
        message_date = []
        total_sum = 0

        # –û–±—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        for item in provided_file:
            if item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"] != 0:
                try:
                    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    total = (
                        (
                            Decimal(
                                str(dict_sales.get(item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"], 0))
                            )  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è dict_sales
                            * Decimal(str(item["%"]))  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂
                        )
                        + Decimal(str(item["–û–∫–ª–∞–¥"]))  # –û–∫–ª–∞–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                        + Decimal(str(item["–û—Ç–ø—É—Å–∫–Ω—ã–µ"]))  # –°—É–º–º–∞ –æ—Ç–ø—É—Å–∫–Ω—ã—Ö
                        - Decimal(str(item["–û—Ñ—á–∞—Å—Ç—å"]))  # –°—É–º–º–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
                        - Decimal(str(item["–î–æ–ª–≥"]))  # –°—É–º–º–∞ –¥–æ–ª–≥–æ–≤
                        + Decimal(str(item["–¥–æ–ø –ø—Ä–µ–º–∏—è"]))  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è
                    )
                    total = total.quantize(Decimal("0.00"))  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è

                    total_sum += total  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –∫ –æ–±—â–µ–π —Å—É–º–º–µ

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
                    result = {
                        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"],  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                        "–°—É–º–º–∞": Decimal(dict_sales.get(item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"], 0)).quantize(
                            Decimal("0.00")
                        ),  # –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è dict_sales
                        "%": (Decimal(item["%"]) * 100).quantize(
                            Decimal("0.00")
                        ),  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂
                        "–ò—Ç–æ–≥%": (
                            Decimal(dict_sales.get(item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"], 0))
                            * Decimal(
                                item["%"]
                            )  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º –æ—Ç –ø—Ä–æ–¥–∞–∂
                        ).quantize(Decimal("0.00")),
                        "–û–∫–ª–∞–¥": Decimal(item["–û–∫–ª–∞–¥"]).quantize(
                            Decimal("0.00")
                        ),  # –û–∫–ª–∞–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                        "–û—Ç–ø—É—Å–∫–Ω—ã–µ": Decimal(item["–û—Ç–ø—É—Å–∫–Ω—ã–µ"]).quantize(
                            Decimal("0.00")
                        ),  # –°—É–º–º–∞ –æ—Ç–ø—É—Å–∫–Ω—ã—Ö
                        "–û—Ñ—á–∞—Å—Ç—å": Decimal(item["–û—Ñ—á–∞—Å—Ç—å"]).quantize(
                            Decimal("0.00")
                        ),  # –°—É–º–º–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
                        "–î–æ–ª–≥": Decimal(item["–î–æ–ª–≥"]).quantize(
                            Decimal("0.00")
                        ),  # –°—É–º–º–∞ –¥–æ–ª–≥–∞
                        "–¥–æ–ø –ø—Ä–µ–º–∏—è": Decimal(item["–¥–æ–ø –ø—Ä–µ–º–∏—è"]).quantize(
                            Decimal("0.00")  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è
                        ),
                        "–ò—Ç–æ–≥": total,  # –û–±—â–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    }

                    result_message = {
                        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫:": item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"],  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                        "–°—É–º–º–∞:": "{}‚Ç±".format(
                            result["–°—É–º–º–∞"]
                        ),  # –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è dict_sales
                        "–ü—Ä–æ—Ü–µ–Ω—Ç:": "{}%".format(result["%"]),  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂
                        "–ò—Ç–æ–≥ %:": "{}‚Ç±".format(
                            result["–ò—Ç–æ–≥%"]
                        ),  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º –æ—Ç –ø—Ä–æ–¥–∞–∂
                        "–û–∫–ª–∞–¥:": "{}‚Ç±".format(result["–û–∫–ª–∞–¥"]),  # –û–∫–ª–∞–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                        "–û—Ç–ø—É—Å–∫–Ω—ã–µ:": "{}‚Ç±".format(
                            result["–û—Ç–ø—É—Å–∫–Ω—ã–µ"]
                        ),  # –°—É–º–º–∞ –æ—Ç–ø—É—Å–∫–Ω—ã—Ö
                        "–û—Ñ—á–∞—Å—Ç—å:": "{}‚Ç±".format(
                            result["–û—Ñ—á–∞—Å—Ç—å"]
                        ),  # –°—É–º–º–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
                        "–î–æ–ª–≥:": "{}‚Ç±".format(result["–î–æ–ª–≥"]),  # –°—É–º–º–∞ –¥–æ–ª–≥–∞
                        "–î–æ–ø –ø—Ä–µ–º–∏—è:": "{}‚Ç±".format(
                            result["–¥–æ–ø –ø—Ä–µ–º–∏—è"]
                        ),  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è
                        "–ò—Ç–æ–≥:": "{}‚Ç±".format(total),  # –û–±—â–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    }

                    total_date.append(
                        result
                    )  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ total_date

                    message_date.append(
                        result_message
                    )  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ message_date

                    result_up = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å result_up
                    result_up.update(
                        result
                    )  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å result_up –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ result

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
                    format_order = {}
                    format_order_messange = {}
                    if item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"] in dict_order:
                        for k, v in dict_order[item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"]].items():
                            sum_order = Decimal(float(v)).quantize(Decimal("0.00"))
                            # pprint(float(sum_order))
                            format_order.update({str(k): sum_order})
                            format_order_messange.update(
                                {"‚Ññ{}:".format(k): "{}‚Ç±".format(sum_order)}
                            )

                    result.update(format_order)
                    result_message.update(format_order_messange)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    result_up.update(
                        {
                            "closeDate": utcnow().shift(hours=3).isoformat(),
                            "order_list": dict_order_list_.get(item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"], []),
                            "order": dict_order.get(item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"], {}),
                        }
                    )

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Decimal –≤ float
                    result_up_float = {
                        k: float(v) if isinstance(v, Decimal) else v
                        for k, v in result_up.items()
                    }
                    # pprint(result_up_float)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB
                    Documents.objects(closeDate=result_up["closeDate"]).update(
                        **result_up_float, upsert=True
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {e} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {sys.exc_info()[-1].tb_lineno}")

        prefix = ["POD", "SKP", "UDL", "M31"]

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - –ø—Ä–µ—Ñ–∏–∫—Å—ã, –∑–Ω–∞—á–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        prefix_dict: dict = {p: [] for p in prefix}

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        for item in total_date:
            for p in prefix:
                if item["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"].startswith(
                    p
                ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" —Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                    prefix_dict[p].append(
                        item
                    )  # –ï—Å–ª–∏ –¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—É—â–µ–º—É –ø—Ä–µ—Ñ–∏–∫—Å—É

        for (
            pref,
            list_,
        ) in prefix_dict.items():  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ prefix_dict
            sum_items = 0
            for item in list_:
                sum_items += Decimal(item["–°—É–º–º–∞"]).quantize(
                    Decimal("0.00")
                )  # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª—é—á–∞ "–°—É–º–º–∞" –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞–Ω–¥—ã –≤ Decimal –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            # pprint(type(sum_items))
            # pprint(sum_items * Decimal(str(oldest_salesman_data[pref]["%"])))

            sum_items_decimal = Decimal(sum_items)

            total_ = Decimal(
                (sum_items * Decimal(str(oldest_salesman_data[pref]["%"])))
                + oldest_salesman_data[pref]["–û–∫–ª–∞–¥"]
                + oldest_salesman_data[pref]["–û—Ç–ø—É—Å–∫–Ω—ã–µ"]
                - oldest_salesman_data[pref]["–û—Ñ—á–∞—Å—Ç—å"]
                - oldest_salesman_data[pref]["–î–æ–ª–≥"]
                + oldest_salesman_data[pref]["–¥–æ–ø –ø—Ä–µ–º–∏—è"]
            ).quantize(Decimal("0.00"))

            resut = {
                "%": Decimal(oldest_salesman_data[pref]["%"] * 100).quantize(
                    Decimal("0.00")
                ),
                "–î–æ–ª–≥": Decimal(oldest_salesman_data[pref]["–î–æ–ª–≥"]).quantize(
                    Decimal("0.00")
                ),
                "–ò—Ç–æ–≥": total_,
                "–ò—Ç–æ–≥%": Decimal(
                    sum_items * oldest_salesman_data[pref]["–ò—Ç–æ–≥%"]
                ).quantize(Decimal("0.00")),
                "–û–∫–ª–∞–¥": Decimal(oldest_salesman_data[pref]["–û–∫–ª–∞–¥"]).quantize(
                    Decimal("0.00")
                ),
                "–û—Ç–ø—É—Å–∫–Ω—ã–µ": Decimal(oldest_salesman_data[pref]["–û—Ç–ø—É—Å–∫–Ω—ã–µ"]).quantize(
                    Decimal("0.00")
                ),
                "–û—Ñ—á–∞—Å—Ç—å": Decimal(oldest_salesman_data[pref]["–û—Ñ—á–∞—Å—Ç—å"]).quantize(
                    Decimal("0.00")
                ),
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": pref,
                "–°—É–º–º–∞": Decimal(sum_items).quantize(Decimal("0.00")),
                "–¥–æ–ø –ø—Ä–µ–º–∏—è": Decimal(
                    oldest_salesman_data[pref]["–¥–æ–ø –ø—Ä–µ–º–∏—è"]
                ).quantize(Decimal("0.00")),
            }
            list_.append(resut)  # –ò–∑–º–µ–Ω–∏–ª —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
            total_date.append(resut)

            result_message = {
                "–°–æ—Ç—Ä—É–¥–Ω–∏–∫:": pref,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                "–°—É–º–º–∞:": "{}‚Ç±".format(
                    Decimal(sum_items).quantize(Decimal("0.00"))
                ),  # –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è dict_sales
                "–ü—Ä–æ—Ü–µ–Ω—Ç:": "{}%".format(
                    Decimal(oldest_salesman_data[pref]["%"] * 100).quantize(
                        Decimal("0.00")
                    )
                ),  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂
                "–ò—Ç–æ–≥ %:": "{}‚Ç±".format(
                    Decimal(sum_items * oldest_salesman_data[pref]["–ò—Ç–æ–≥%"]).quantize(
                        Decimal("0.00")
                    )
                ),
                "–û–∫–ª–∞–¥:": "{}‚Ç±".format(
                    Decimal(oldest_salesman_data[pref]["–û–∫–ª–∞–¥"]).quantize(
                        Decimal("0.00")
                    )
                ),  # –û–∫–ª–∞–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                "–û—Ç–ø—É—Å–∫–Ω—ã–µ:": "{}‚Ç±".format(
                    Decimal(oldest_salesman_data[pref]["–û—Ç–ø—É—Å–∫–Ω—ã–µ"]).quantize(
                        Decimal("0.00")
                    )
                ),  # –°—É–º–º–∞ –æ—Ç–ø—É—Å–∫–Ω—ã—Ö
                "–û—Ñ—á–∞—Å—Ç—å:": "{}‚Ç±".format(
                    Decimal(oldest_salesman_data[pref]["–û—Ñ—á–∞—Å—Ç—å"]).quantize(
                        Decimal("0.00")
                    )
                ),  # –°—É–º–º–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
                "–î–æ–ª–≥:": "{}‚Ç±".format(
                    Decimal(oldest_salesman_data[pref]["–¥–æ–ø –ø—Ä–µ–º–∏—è"]).quantize(
                        Decimal("0.00")
                    )
                ),  # –°—É–º–º–∞ –¥–æ–ª–≥–∞
                "–î–æ–ø –ø—Ä–µ–º–∏—è:": "{}‚Ç±".format(
                    Decimal(oldest_salesman_data[pref]["–¥–æ–ø –ø—Ä–µ–º–∏—è"]).quantize(
                        Decimal("0.00")
                    )
                ),
                "–ò—Ç–æ–≥:": "{}‚Ç±".format(total_),  # –û–±—â–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            }
            message_date.append(result_message)
        # pprint(prefix_dict)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        books = []
        for k, v in prefix_dict.items():
            if len(v) > 0:
                books.append(json_to_xls_format_change_(v))
        message_date.append(
            {
                "closeDate": utcnow().shift(hours=3).isoformat()[:10],
                "–ò—Ç–æ–≥": total_sum,
            }
        )
        # pprint(books)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∫–Ω–∏–≥–∏ Excel
        return message_date, books
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {sys.exc_info()[-1].tb_lineno}")
